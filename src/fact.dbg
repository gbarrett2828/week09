mc: 11:39 3.18.2019. Compiling fact.c in debug mode.

The input program is:

int fact(int n)
{
  if (==(n, 0)) then
    return
      1
  else
    return
      *(n, fact(-(n, 1)))
}
int main()
{
  print fact(7);
  print fact(8);
  print fact(9);
  print fact(10);
  print fact(11);
  return
    fact(7)
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
fact : int -> int
main :  -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int fact(int n)
{
  if (  let 
      x8 : int = n
      x9 : int = 0
      x10 : int = ==(x8, x9)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x0 : int = n
          x1 : int =
            let 
                x3 : int =
                  let 
                      x5 : int = n
                      x6 : int = 1
                      x7 : int = -(x5, x6)
                  in
                    x7
                x4 : int = fact(x3)
            in
              x4
          x2 : int = *(x0, x1)
      in
        x2
}
int main()
{
  print let x11 : int = 7 in let x12 : int = fact(x11) in x12;
  print let x13 : int = 8 in let x14 : int = fact(x13) in x14;
  print let x15 : int = 9 in let x16 : int = fact(x15) in x16;
  print let x17 : int = 10 in let x18 : int = fact(x17) in x18;
  print let x19 : int = 11 in let x20 : int = fact(x19) in x20;
  return
    let 
        x21 : int = 7
        x22 : int = fact(x21)
    in
      x22
}

After the lifting phase:

int fact(int n)
{
  if (  let 
      x8 : int = n
      x9 : int = 0
      x10 : int = ==(x8, x9)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x0 : int = n
          x5 : int = n
          x6 : int = 1
          x7 : int = -(x5, x6)
          x3 : int = x7
          x4 : int = fact(x3)
          x1 : int = x4
          x2 : int = *(x0, x1)
      in
        x2
}
int main()
{
  print let x11 : int = 7 in let x12 : int = fact(x11) in x12;
  print let x13 : int = 8 in let x14 : int = fact(x13) in x14;
  print let x15 : int = 9 in let x16 : int = fact(x15) in x16;
  print let x17 : int = 10 in let x18 : int = fact(x17) in x18;
  print let x19 : int = 11 in let x20 : int = fact(x19) in x20;
  return
    let 
        x21 : int = 7
        x22 : int = fact(x21)
    in
      x22
}

After the copyprop phase:

int fact(int n)
{
  if (  let 
      x9 : int = 0
      x10 : int = ==(n, x9)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x6 : int = 1
          x7 : int = -(n, x6)
          x4 : int = fact(x7)
          x2 : int = *(n, x4)
      in
        x2
}
int main()
{
  print let x11 : int = 7 in let x12 : int = fact(x11) in x12;
  print let x13 : int = 8 in let x14 : int = fact(x13) in x14;
  print let x15 : int = 9 in let x16 : int = fact(x15) in x16;
  print let x17 : int = 10 in let x18 : int = fact(x17) in x18;
  print let x19 : int = 11 in let x20 : int = fact(x19) in x20;
  return
    let 
        x21 : int = 7
        x22 : int = fact(x21)
    in
      x22
}

After the control phase:

fact:	(n)
	x9 = 0
	x10 = n == x9
	jmpzero x10, l0
	x24 = 1
	return x24
	jmp l1
l0:	nop
	x6 = 1
	x7 = n - x6
	x4 = call fact(x7)
	x2 = n * x4
	x23 = x2
	return x23
l1:	nop

main:	()
	x11 = 7
	x12 = call fact(x11)
	x25 = x12
	print x25
	x13 = 8
	x14 = call fact(x13)
	x26 = x14
	print x26
	x15 = 9
	x16 = call fact(x15)
	x27 = x16
	print x27
	x17 = 10
	x18 = call fact(x17)
	x28 = x18
	print x28
	x19 = 11
	x20 = call fact(x19)
	x29 = x20
	print x29
	x21 = 7
	x22 = call fact(x21)
	x30 = x22
	return x30

CG environment for fact is:
n : 2
x10 : -2
x2 : -7
x23 : -8
x24 : -3
x4 : -6
x6 : -4
x7 : -5
x9 : -1

CG environment for main is:
x11 : -1
x12 : -2
x13 : -4
x14 : -5
x15 : -7
x16 : -8
x17 : -10
x18 : -11
x19 : -13
x20 : -14
x21 : -16
x22 : -17
x25 : -3
x26 : -6
x27 : -9
x28 : -12
x29 : -15
x30 : -18

Emitting MIPS assembley code to fact.asm


