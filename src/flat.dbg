mc: 9:54 3.19.2019. Compiling flat.c in debug mode.

The input program is:

int main()
{
  int a;
  a =   f(+(2, 3), *(4, 5), 8)
  ;
}
int f(int b, int c, int d)
{
  return
    b
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
f : int * int * int -> int
main :  -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int main()
{
  int a;
  a =   let 
      x0 : int =
        let 
            x7 : int = 2
            x8 : int = 3
            x9 : int = +(x7, x8)
        in
          x9
      x1 : int =
        let 
            x4 : int = 4
            x5 : int = 5
            x6 : int = *(x4, x5)
        in
          x6
      x2 : int = 8
      x3 : int = f(x0, x1, x2)
  in
    x3
  ;
}
int f(int b, int c, int d)
{
  return
    b
}

After the lifting phase:

int main()
{
  int a;
  a =   let 
      x7 : int = 2
      x8 : int = 3
      x9 : int = +(x7, x8)
      x0 : int = x9
      x4 : int = 4
      x5 : int = 5
      x6 : int = *(x4, x5)
      x1 : int = x6
      x2 : int = 8
      x3 : int = f(x0, x1, x2)
  in
    x3
  ;
}
int f(int b, int c, int d)
{
  return
    b
}

After the copyprop phase:

int main()
{
  int a;
  a =   let 
      x7 : int = 2
      x8 : int = 3
      x9 : int = +(x7, x8)
      x4 : int = 4
      x5 : int = 5
      x6 : int = *(x4, x5)
      x2 : int = 8
      x3 : int = f(x9, x6, x2)
  in
    x3
  ;
}
int f(int b, int c, int d)
{
  return
    b
}

After the control phase:

main:	()
	a = 0
	x7 = 2
	x8 = 3
	x9 = x7 + x8
	x4 = 4
	x5 = 5
	x6 = x4 * x5
	x2 = 8
	x3 = call f(x9, x6, x2)
	a = x3

f:	(b, c, d)
	x10 = b
	return x10

CG environment for main is:
a : -10
x2 : -8
x3 : -9
x4 : -5
x5 : -6
x6 : -7
x7 : -2
x8 : -3
x9 : -4

CG environment for f is:
b : 4
c : 3
d : 2
x10 : -1

Emitting MIPS assembley code to flat.asm


